[{"/Users/nishant/Downloads/dimCure/client/src/index.js":"1","/Users/nishant/Downloads/dimCure/client/src/App.js":"2","/Users/nishant/Downloads/dimCure/client/src/components/Auth/Auth.js":"3","/Users/nishant/Downloads/dimCure/client/src/components/Home/Home.js":"4","/Users/nishant/Downloads/dimCure/client/src/reducers/index.js":"5","/Users/nishant/Downloads/dimCure/client/src/components/Navbar/Navbar.js":"6","/Users/nishant/Downloads/dimCure/client/src/components/PostDetails/PostDetails.jsx":"7","/Users/nishant/Downloads/dimCure/client/src/components/Form/Form.js":"8","/Users/nishant/Downloads/dimCure/client/src/components/Posts/Posts.js":"9","/Users/nishant/Downloads/dimCure/client/src/components/Navbar/styles.js":"10","/Users/nishant/Downloads/dimCure/client/src/components/Auth/icon.js":"11","/Users/nishant/Downloads/dimCure/client/src/components/Auth/Input.js":"12","/Users/nishant/Downloads/dimCure/client/src/components/Auth/styles.js":"13","/Users/nishant/Downloads/dimCure/client/src/components/Home/styles.js":"14","/Users/nishant/Downloads/dimCure/client/src/reducers/auth.js":"15","/Users/nishant/Downloads/dimCure/client/src/reducers/posts.js":"16","/Users/nishant/Downloads/dimCure/client/src/actions/posts.js":"17","/Users/nishant/Downloads/dimCure/client/src/constants/actionTypes.js":"18","/Users/nishant/Downloads/dimCure/client/src/actions/auth.js":"19","/Users/nishant/Downloads/dimCure/client/src/components/Pagination.jsx":"20","/Users/nishant/Downloads/dimCure/client/src/components/Form/styles.js":"21","/Users/nishant/Downloads/dimCure/client/src/components/Posts/styles.js":"22","/Users/nishant/Downloads/dimCure/client/src/components/Posts/Post/Post.js":"23","/Users/nishant/Downloads/dimCure/client/src/components/PostDetails/styles.js":"24","/Users/nishant/Downloads/dimCure/client/src/api/index.js":"25","/Users/nishant/Downloads/dimCure/client/src/components/PostDetails/CommentSection.jsx":"26","/Users/nishant/Downloads/dimCure/client/src/components/styles.js":"27","/Users/nishant/Downloads/dimCure/client/src/components/Posts/Post/styles.js":"28"},{"size":746,"mtime":1642527818000,"results":"29","hashOfConfig":"30"},{"size":1149,"mtime":1646819780000,"results":"31","hashOfConfig":"30"},{"size":5203,"mtime":1646821661000,"results":"32","hashOfConfig":"30"},{"size":4166,"mtime":1642527818000,"results":"33","hashOfConfig":"30"},{"size":326,"mtime":1642527818000,"results":"34","hashOfConfig":"30"},{"size":3005,"mtime":1646826100000,"results":"35","hashOfConfig":"30"},{"size":3846,"mtime":1646826345000,"results":"36","hashOfConfig":"30"},{"size":5193,"mtime":1646826425000,"results":"37","hashOfConfig":"30"},{"size":795,"mtime":1646826140000,"results":"38","hashOfConfig":"30"},{"size":1334,"mtime":1642527818000,"results":"39","hashOfConfig":"30"},{"size":502,"mtime":1642527818000,"results":"40","hashOfConfig":"30"},{"size":1006,"mtime":1642527818000,"results":"41","hashOfConfig":"30"},{"size":638,"mtime":1642527818000,"results":"42","hashOfConfig":"30"},{"size":407,"mtime":1642527818000,"results":"43","hashOfConfig":"30"},{"size":640,"mtime":1642527818000,"results":"44","hashOfConfig":"30"},{"size":2133,"mtime":1642527818000,"results":"45","hashOfConfig":"30"},{"size":2854,"mtime":1642527818000,"results":"46","hashOfConfig":"30"},{"size":436,"mtime":1642527818000,"results":"47","hashOfConfig":"30"},{"size":850,"mtime":1642527818000,"results":"48","hashOfConfig":"30"},{"size":967,"mtime":1642527818000,"results":"49","hashOfConfig":"30"},{"size":425,"mtime":1642527818000,"results":"50","hashOfConfig":"30"},{"size":1340,"mtime":1642527818000,"results":"51","hashOfConfig":"30"},{"size":4641,"mtime":1642527818000,"results":"52","hashOfConfig":"30"},{"size":1039,"mtime":1642527818000,"results":"53","hashOfConfig":"30"},{"size":1489,"mtime":1646824818000,"results":"54","hashOfConfig":"30"},{"size":2321,"mtime":1646826410000,"results":"55","hashOfConfig":"30"},{"size":145,"mtime":1642527818000,"results":"56","hashOfConfig":"30"},{"size":1032,"mtime":1642527818000,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4g4ogu",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nishant/Downloads/dimCure/client/src/index.js",[],"/Users/nishant/Downloads/dimCure/client/src/App.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Auth/Auth.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Home/Home.js",[],"/Users/nishant/Downloads/dimCure/client/src/reducers/index.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Navbar/Navbar.js",["118"],"import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { AppBar, Avatar, Toolbar, Typography, Button } from \"@material-ui/core\";\n\n//importing styles file -> styles.js\nimport useStyles from \"./styles.js\";\n\nimport { useDispatch } from \"react-redux\";\nimport decode from \"jwt-decode\";\n\n// img\nimport memories from \"../../images/dimCure.png\";\n\nimport * as actionType from \"../../constants/actionTypes\";\n\nconst Navbar = () => {\n  // getting user details returned from google login\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"profile\")));\n\n  const classes = useStyles();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const logout = () => {\n    dispatch({ type: actionType.LOGOUT });\n\n    history.push(\"/auth\");\n\n    setUser(null);\n  };\n\n  useEffect(() => {\n    // check for the token\n    const token = user?.token;\n\n    // token expired log-out\n    if (token) {\n      const decodedToken = decode(token);\n\n      if (decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem(\"profile\")));\n  }, [location]);\n\n  return (\n    <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n      {/* <Link to=\"/\" className={classes.brandContainer}>\n        <Typography\n          className={classes.heading}\n          variant=\"h2\"\n          align=\"center\"\n          disableUnderline={true}\n        >\n          Share Ideas\n        </Typography>\n        <img className={classes.image} src={ideas} alt=\"icon\" height=\"40px\" />\n      </Link> */}\n\n      <div className={classes.brandContainer}>\n        <img\n          className={classes.image}\n          src={memories}\n          alt=\"icon\"\n          height=\"120px\"\n        />\n\n        <Typography\n          component={Link}\n          to=\"/\"\n          className={classes.heading}\n          variant=\"h2\"\n          align=\"center\"\n        >\n          Memories by dimCure\n        </Typography>\n      </div>\n\n      <Toolbar className={classes.toolbar}>\n        {user?.result ? (\n          <div className={classes.profile}>\n            <Avatar\n              className={classes.purple}\n              alt={user?.result.name}\n              src={user?.result.imageUrl}\n            >\n              {user?.result.name.charAt(0)}\n            </Avatar>\n            <Typography className={classes.userName} varient=\"h6\">\n              {user?.result.name}\n            </Typography>\n            <Button\n              variant=\"contained\"\n              className={classes.logout}\n              color=\"secondary\"\n              onClick={logout}\n            >\n              Logout\n            </Button>\n          </div>\n        ) : (\n          <Button\n            component={Link}\n            to=\"/auth\"\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Log In\n          </Button>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","/Users/nishant/Downloads/dimCure/client/src/components/PostDetails/PostDetails.jsx",["119","120","121"],"import React, { useEffect } from \"react\";\n\nimport {\n  Paper,\n  Typography,\n  CircularProgress,\n  Divider,\n} from \"@material-ui/core/\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport moment from \"moment\";\n\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport CommentSection from \"./CommentSection\";\n\nimport { getPost, getPostsBySearch } from \"../../actions/posts\";\nimport useStyles from \"./styles\";\n\nconst Post = () => {\n  const { post, posts, isLoading } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const classes = useStyles();\n  const { id } = useParams();\n\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id]);\n\n  useEffect(() => {\n    if (post) {\n      dispatch(\n        getPostsBySearch({ search: \"none\", tags: post?.tags.join(\",\") })\n      );\n    }\n  }, [post]);\n\n  if (!post) return null;\n\n  const openPost = (_id) => history.push(`/posts/${_id}`);\n\n  if (isLoading) {\n    return (\n      <Paper elevation={6} className={classes.loadingPaper}>\n        <CircularProgress size=\"7em\" />\n      </Paper>\n    );\n  }\n\n  const recommendedPosts = posts.filter(({ _id }) => _id !== post._id);\n\n  return (\n    <Paper style={{ padding: \"20px\", borderRadius: \"15px\" }} elevation={6}>\n      <div className={classes.card}>\n        <div className={classes.section}>\n          <Typography variant=\"h3\" component=\"h2\">\n            {post.title}\n          </Typography>\n          <Typography\n            gutterBottom\n            variant=\"h6\"\n            color=\"textSecondary\"\n            component=\"h2\"\n          >\n            {post.tags.map((tag) => `#${tag} `)}\n          </Typography>\n          <Typography gutterBottom variant=\"body1\" component=\"p\">\n            {post.message}\n          </Typography>\n          <Typography variant=\"h6\">Created by: {post.name}</Typography>\n          <Typography variant=\"body1\">\n            {moment(post.createdAt).fromNow()}\n          </Typography>\n          <Divider style={{ margin: \"20px 0\" }} />\n          <Typography variant=\"body1\"></Typography>\n          <Divider style={{ margin: \"20px 0\" }} />\n          <CommentSection post={post} />\n          <Divider style={{ margin: \"20px 0\" }} />\n        </div>\n        <div className={classes.imageSection}>\n          <img\n            className={classes.media}\n            src={\n              post.selectedFile ||\n              \"https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png\"\n            }\n            alt={post.title}\n          />\n        </div>\n      </div>\n      {!!recommendedPosts.length && (\n        <div className={classes.section}>\n          <Typography gutterBottom variant=\"h5\">\n            Related to this ( under same tag )\n          </Typography>\n          <Divider />\n          <div className={classes.recommendedPosts}>\n            {recommendedPosts.map(\n              ({ title, name, message, likes, selectedFile, _id }) => (\n                <div\n                  style={{ margin: \"20px\", cursor: \"pointer\" }}\n                  onClick={() => openPost(_id)}\n                  key={_id}\n                >\n                  <Typography gutterBottom variant=\"h6\">\n                    {title}\n                  </Typography>\n                  <Typography gutterBottom variant=\"subtitle2\">\n                    {name}\n                  </Typography>\n                  <Typography gutterBottom variant=\"subtitle2\">\n                    {message}\n                  </Typography>\n                  <Typography gutterBottom variant=\"subtitle1\">\n                    Likes: {likes.length}\n                  </Typography>\n                  <img src={selectedFile} width=\"200px\" />\n                </div>\n              )\n            )}\n          </div>\n        </div>\n      )}\n    </Paper>\n  );\n};\n\nexport default Post;\n","/Users/nishant/Downloads/dimCure/client/src/components/Form/Form.js",["122"],"import React, { useState, useEffect } from \"react\";\n\n// importing all components that we r gonna use for adding jsx\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\n\nimport FileBase from \"react-file-base64\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useStyles from \"./styles.js\";\nimport ChipInput from \"material-ui-chip-input\";\n\nimport { createPost, updatePost } from \"../../actions/posts.js\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    // creator: \"\",\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n\n  // we want data for the updated posts\n  // - we use ternery (if we have current id)\n  // -- then we loop over state.posts and call a find() method on them\n  // --- more specifically -> we want to find the post (p) that has the same id as our currentId\n  // ---- else null\n  const post = useSelector((state) =>\n    currentId\n      ? state.posts.posts.find((message) => message._id === currentId)\n      : null\n  );\n\n  const classes = useStyles();\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  // we will dispatch this in handleSubmit\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: \"\", message: \"\", tags: [], selectedFile: \"\" });\n  };\n\n  // now we use useEffects to populate the values of the form\n  // - { updating - so we dont need to write everything again}\n  useEffect(() => {\n    if (!post?.title) clear();\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async (e) => {\n    // we will send post request with all the data usse types in\n    e.preventDefault();\n    // (always use) not to get the refresh in the browser\n\n    if (currentId === 0) {\n      dispatch(createPost({ ...postData, name: user?.result?.name }, history));\n      clear();\n    } else {\n      dispatch(\n        updatePost(currentId, { ...postData, name: user?.result?.name })\n      );\n      clear();\n    }\n  };\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paper} elevation={6}>\n        <Typography varient=\"h6\" align=\"center\">\n          Sign In to share your memories and like other's.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  const handleAddChip = (tag) => {\n    setPostData({ ...postData, tags: [...postData.tags, tag] });\n  };\n\n  const handleDeleteChip = (chipToDelete) => {\n    setPostData({\n      ...postData,\n      tags: postData.tags.filter((tag) => tag !== chipToDelete),\n    });\n  };\n\n  return (\n    <Paper className={classes.paper} elevation={6}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography varient=\"h6\">\n          {currentId ? `Editing \"${post?.title}\"` : \"Creating\"}\n        </Typography>\n\n        {/* <TextField\n          neme=\"creator\"\n          variant=\"filled\"\n          label=\"Creator\"\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        /> */}\n\n        <TextField\n          neme=\"title\"\n          variant=\"standard\"\n          label=\"Title / Subject\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n\n        <TextField\n          neme=\"message\"\n          variant=\"standard\"\n          label=\"Description /  Message\"\n          fullWidth\n          multiline\n          rows={4}\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n\n        <div style={{ padding: \"5px 0\", width: \"94%\" }}>\n          <ChipInput\n            neme=\"tags\"\n            variant=\"standard\"\n            label=\"Tags (coma seperated)\"\n            fullWidth\n            value={postData.tags}\n            onAdd={(chip) => handleAddChip(chip)}\n            onDelete={(chip) => handleDeleteChip(chip)}\n          />\n        </div>\n\n        {/* <TextField\n          neme=\"tags\"\n          variant=\"standard\"\n          label=\"Tags (coma seperated)\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) =>\n            setPostData({ ...postData, tags: e.target.value.split(\",\") })\n          }\n        /> */}\n\n        <div className={classes.fileInput}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n\n        <Button\n          className={classes.buttonSubmit}\n          varient=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n","/Users/nishant/Downloads/dimCure/client/src/components/Posts/Posts.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Navbar/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Auth/icon.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Auth/Input.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Auth/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Home/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/reducers/auth.js",[],"/Users/nishant/Downloads/dimCure/client/src/reducers/posts.js",["123","124"],"// what is a reducer\n// - it is a function that accepts the state and an action\n// -- then based on the action type {in other words action.type ==== create} it returns something\n\nimport {\n  FETCH_ALL,\n  FETCH_BY_SEARCH,\n  FETCH_POST,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  COMMENT,\n} from \"../constants/actionTypes\";\n\n// our state is simply going to be post so instead of  state = []   we write  posts = []\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case \"START_LOADING\":\n      return { ...state, isLoading: true };\n\n    case \"END_LOADING\":\n      return { ...state, isLoading: false };\n\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state, posts: action.payload.data };\n\n    case FETCH_POST:\n      return { ...state, post: action.payload.post };\n\n    case LIKE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          // change the post that just received a comment\n          if (post._id == +action.payload._id) {\n            return action.payload;\n          }\n          // return all other post normally\n          return post;\n        }),\n      };\n    case CREATE:\n      return { ...state, posts: [...state.posts, action.payload] };\n    // we send an array of posts --> spread all the post & then add new post\n\n    case UPDATE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case DELETE:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\n// reducer is a function ( that accepts the state & action )\n// const reducer = (posts = [], action) => {\n","/Users/nishant/Downloads/dimCure/client/src/actions/posts.js",[],"/Users/nishant/Downloads/dimCure/client/src/constants/actionTypes.js",[],"/Users/nishant/Downloads/dimCure/client/src/actions/auth.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Pagination.jsx",[],"/Users/nishant/Downloads/dimCure/client/src/components/Form/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Posts/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Posts/Post/Post.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/PostDetails/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/api/index.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/PostDetails/CommentSection.jsx",[],"/Users/nishant/Downloads/dimCure/client/src/components/styles.js",[],"/Users/nishant/Downloads/dimCure/client/src/components/Posts/Post/styles.js",[],{"ruleId":"125","severity":1,"message":"126","line":45,"column":6,"nodeType":"127","endLine":45,"endColumn":16,"suggestions":"128"},{"ruleId":"125","severity":1,"message":"129","line":30,"column":6,"nodeType":"127","endLine":30,"endColumn":10,"suggestions":"130"},{"ruleId":"125","severity":1,"message":"129","line":38,"column":6,"nodeType":"127","endLine":38,"endColumn":12,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":119,"column":19,"nodeType":"134","endLine":119,"endColumn":59},{"ruleId":"125","severity":1,"message":"135","line":52,"column":6,"nodeType":"127","endLine":52,"endColumn":12,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":17,"column":1,"nodeType":"139","endLine":77,"endColumn":3},{"ruleId":"140","severity":1,"message":"141","line":51,"column":24,"nodeType":"142","messageId":"143","endLine":51,"endColumn":26},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logout' and 'user?.token'. Either include them or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["145"],["146"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'clear'. Either include it or remove the dependency array.",["147"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [location, logout, user?.token]",{"range":"156","text":"157"},"Update the dependencies array to be: [dispatch, id]",{"range":"158","text":"159"},"Update the dependencies array to be: [dispatch, post]",{"range":"160","text":"161"},"Update the dependencies array to be: [clear, post]",{"range":"162","text":"163"},[1187,1197],"[location, logout, user?.token]",[705,709],"[dispatch, id]",[858,864],"[dispatch, post]",[1633,1639],"[clear, post]"]