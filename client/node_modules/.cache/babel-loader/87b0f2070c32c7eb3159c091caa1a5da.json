{"ast":null,"code":"// what is a reducer\n// - it is a function that accepts the state and an action\n// -- then based on the action type {in other words action.type ==== create} it returns something\nimport { FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, CREATE, UPDATE, DELETE, LIKE, COMMENT } from \"../constants/actionTypes\"; // our state is simply going to be post so instead of  state = []   we write  posts = []\n\nexport default ((state = {\n  isLoading: true,\n  posts: []\n}, action) => {\n  switch (action.type) {\n    case \"START_LOADING\":\n      return { ...state,\n        isLoading: true\n      };\n\n    case \"END_LOADING\":\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload.data\n      };\n\n    case FETCH_POST:\n      return { ...state,\n        post: action.payload.post\n      };\n\n    case LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case COMMENT:\n      return { ...state,\n        posts: state.posts.map(post => {\n          // change the post that just received a comment\n          if (post._id == +action.payload._id) {\n            return action.payload;\n          } // return all other post normally\n\n\n          return post;\n        })\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n    // we send an array of posts --> spread all the post & then add new post\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n}); // reducer is a function ( that accepts the state & action )\n// const reducer = (posts = [], action) => {","map":{"version":3,"sources":["/Users/nishant/Downloads/dimCure/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","FETCH_POST","CREATE","UPDATE","DELETE","LIKE","COMMENT","state","isLoading","posts","action","type","payload","data","currentPage","numberOfPages","post","map","_id","filter"],"mappings":"AAAA;AACA;AACA;AAEA,SACEA,SADF,EAEEC,eAFF,EAGEC,UAHF,EAIEC,MAJF,EAKEC,MALF,EAMEC,MANF,EAOEC,IAPF,EAQEC,OARF,QASO,0BATP,C,CAWA;;AACA,gBAAe,CAACC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAAT,EAAyCC,MAAzC,KAAoD;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EAAE,GAAGJ,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AAEF,SAAK,aAAL;AACE,aAAO,EAAE,GAAGD,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AAEF,SAAKT,SAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAGLC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,aAAa,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJzB,OAAP;;AAOF,SAAKf,eAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC;AAAlC,OAAP;;AAEF,SAAKZ,UAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYS,QAAAA,IAAI,EAAEN,MAAM,CAACE,OAAP,CAAeI;AAAjC,OAAP;;AAEF,SAAKX,IAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYQ,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDI,IAD9C;AAFF,OAAP;;AAMF,SAAKV,OAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYQ,GAAZ,CAAiBD,IAAD,IAAU;AAC/B;AACA,cAAIA,IAAI,CAACE,GAAL,IAAY,CAACR,MAAM,CAACE,OAAP,CAAeM,GAAhC,EAAqC;AACnC,mBAAOR,MAAM,CAACE,OAAd;AACD,WAJ8B,CAK/B;;;AACA,iBAAOI,IAAP;AACD,SAPM;AAFF,OAAP;;AAWF,SAAKd,MAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYE,QAAAA,KAAK,EAAE,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBC,MAAM,CAACE,OAAxB;AAAnB,OAAP;AACF;;AAEA,SAAKT,MAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYQ,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDI,IAD9C;AAFF,OAAP;;AAMF,SAAKZ,MAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYU,MAAZ,CAAoBH,IAAD,IAAUA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAjD;AAFF,OAAP;;AAIF;AACE,aAAOL,KAAP;AAzDJ;AA2DD,CA5DD,E,CA8DA;AACA","sourcesContent":["// what is a reducer\n// - it is a function that accepts the state and an action\n// -- then based on the action type {in other words action.type ==== create} it returns something\n\nimport {\n  FETCH_ALL,\n  FETCH_BY_SEARCH,\n  FETCH_POST,\n  CREATE,\n  UPDATE,\n  DELETE,\n  LIKE,\n  COMMENT,\n} from \"../constants/actionTypes\";\n\n// our state is simply going to be post so instead of  state = []   we write  posts = []\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case \"START_LOADING\":\n      return { ...state, isLoading: true };\n\n    case \"END_LOADING\":\n      return { ...state, isLoading: false };\n\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state, posts: action.payload.data };\n\n    case FETCH_POST:\n      return { ...state, post: action.payload.post };\n\n    case LIKE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          // change the post that just received a comment\n          if (post._id == +action.payload._id) {\n            return action.payload;\n          }\n          // return all other post normally\n          return post;\n        }),\n      };\n    case CREATE:\n      return { ...state, posts: [...state.posts, action.payload] };\n    // we send an array of posts --> spread all the post & then add new post\n\n    case UPDATE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case DELETE:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n\n// reducer is a function ( that accepts the state & action )\n// const reducer = (posts = [], action) => {\n"]},"metadata":{},"sourceType":"module"}