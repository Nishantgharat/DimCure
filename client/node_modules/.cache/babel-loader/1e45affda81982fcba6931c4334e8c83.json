{"ast":null,"code":"var _jsxFileName = \"/Users/nishant/Downloads/dimCure/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; // importing all components that we r gonna use for adding jsx\n\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useStyles from \"./styles.js\";\nimport ChipInput from \"material-ui-chip-input\";\nimport { createPost, updatePost } from \"../../actions/posts.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    // creator: \"\",\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  }); // we want data for the updated posts\n  // - we use ternery (if we have current id)\n  // -- then we loop over state.posts and call a find() method on them\n  // --- more specifically -> we want to find the post (p) that has the same id as our currentId\n  // ---- else null\n\n  const post = useSelector(state => currentId ? state.posts.posts.find(message => message._id === currentId) : null);\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch(); // we will dispatch this in handleSubmit\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: [],\n      selectedFile: \"\"\n    });\n  }; // now we use useEffects to populate the values of the form\n  // - { updating - so we dont need to write everything again}\n\n\n  useEffect(() => {\n    if (!(post === null || post === void 0 ? void 0 : post.title)) clear();\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async e => {\n    // we will send post request with all the data usse types in\n    e.preventDefault(); // (always use) not to get the refresh in the browser\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }, history));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      elevation: 6,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        varient: \"h6\",\n        align: \"center\",\n        children: \"Sign In to share your memories and like other's.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleAddChip = tag => {\n    setPostData({ ...postData,\n      tags: [...postData.tags, tag]\n    });\n  };\n\n  const handleDeleteChip = chipToDelete => {\n    setPostData({ ...postData,\n      tags: postData.tags.filter(tag => tag !== chipToDelete)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    elevation: 6,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        varient: \"h6\",\n        children: currentId ? `Editing \"${post === null || post === void 0 ? void 0 : post.title}\"` : \"Creating\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        neme: \"title\",\n        variant: \"standard\",\n        label: \"Title / Subject\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        neme: \"message\",\n        variant: \"standard\",\n        label: \"Description /  Message\",\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"5px 0\",\n          width: \"94%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ChipInput, {\n          neme: \"tags\",\n          variant: \"standard\",\n          label: \"Tags (coma seperated)\",\n          fullWidth: true,\n          value: postData.tags,\n          onAdd: chip => handleAddChip(chip),\n          onDelete: chip => handleDeleteChip(chip)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        varient: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"3PmzrrLnRQIfT5IVL1919/5013E=\", false, function () {\n  return [useSelector, useStyles, useHistory, useDispatch];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/nishant/Downloads/dimCure/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useHistory","useDispatch","useSelector","useStyles","ChipInput","createPost","updatePost","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","classes","history","dispatch","user","JSON","parse","localStorage","getItem","clear","handleSubmit","e","preventDefault","name","result","paper","handleAddChip","tag","handleDeleteChip","chipToDelete","filter","root","form","target","value","padding","width","chip","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n// importing all components that we r gonna use for adding jsx\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\n\nimport FileBase from \"react-file-base64\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useStyles from \"./styles.js\";\nimport ChipInput from \"material-ui-chip-input\";\n\nimport { createPost, updatePost } from \"../../actions/posts.js\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    // creator: \"\",\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n\n  // we want data for the updated posts\n  // - we use ternery (if we have current id)\n  // -- then we loop over state.posts and call a find() method on them\n  // --- more specifically -> we want to find the post (p) that has the same id as our currentId\n  // ---- else null\n  const post = useSelector((state) =>\n    currentId\n      ? state.posts.posts.find((message) => message._id === currentId)\n      : null\n  );\n\n  const classes = useStyles();\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  // we will dispatch this in handleSubmit\n\n  const user = JSON.parse(localStorage.getItem(\"profile\"));\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: \"\", message: \"\", tags: [], selectedFile: \"\" });\n  };\n\n  // now we use useEffects to populate the values of the form\n  // - { updating - so we dont need to write everything again}\n  useEffect(() => {\n    if (!post?.title) clear();\n    if (post) setPostData(post);\n  }, [post]);\n\n  const handleSubmit = async (e) => {\n    // we will send post request with all the data usse types in\n    e.preventDefault();\n    // (always use) not to get the refresh in the browser\n\n    if (currentId === 0) {\n      dispatch(createPost({ ...postData, name: user?.result?.name }, history));\n      clear();\n    } else {\n      dispatch(\n        updatePost(currentId, { ...postData, name: user?.result?.name })\n      );\n      clear();\n    }\n  };\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paper} elevation={6}>\n        <Typography varient=\"h6\" align=\"center\">\n          Sign In to share your memories and like other's.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  const handleAddChip = (tag) => {\n    setPostData({ ...postData, tags: [...postData.tags, tag] });\n  };\n\n  const handleDeleteChip = (chipToDelete) => {\n    setPostData({\n      ...postData,\n      tags: postData.tags.filter((tag) => tag !== chipToDelete),\n    });\n  };\n\n  return (\n    <Paper className={classes.paper} elevation={6}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography varient=\"h6\">\n          {currentId ? `Editing \"${post?.title}\"` : \"Creating\"}\n        </Typography>\n\n        {/* <TextField\n          neme=\"creator\"\n          variant=\"filled\"\n          label=\"Creator\"\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        /> */}\n\n        <TextField\n          neme=\"title\"\n          variant=\"standard\"\n          label=\"Title / Subject\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n\n        <TextField\n          neme=\"message\"\n          variant=\"standard\"\n          label=\"Description /  Message\"\n          fullWidth\n          multiline\n          rows={4}\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n\n        <div style={{ padding: \"5px 0\", width: \"94%\" }}>\n          <ChipInput\n            neme=\"tags\"\n            variant=\"standard\"\n            label=\"Tags (coma seperated)\"\n            fullWidth\n            value={postData.tags}\n            onAdd={(chip) => handleAddChip(chip)}\n            onDelete={(chip) => handleDeleteChip(chip)}\n          />\n        </div>\n\n        {/* <TextField\n          neme=\"tags\"\n          variant=\"standard\"\n          label=\"Tags (coma seperated)\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) =>\n            setPostData({ ...postData, tags: e.target.value.split(\",\") })\n          }\n        /> */}\n\n        <div className={classes.fileInput}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n\n        <Button\n          className={classes.buttonSubmit}\n          varient=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}